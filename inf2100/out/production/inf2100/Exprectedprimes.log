   1: 
   2: # Finn alle primtall opp til n
   3: # ved hjelp av teknikken kalt «Eratosthenes' sil».
   4: 
   5: n = 1000
Scanner: name token on line 5: n
Scanner: = token on line 5
Scanner: integer literal token on line 5: 1000
Scanner: NEWLINE token on line 5
   6: primes = [True] * (n+1)
Scanner: name token on line 6: primes
Scanner: = token on line 6
Scanner: [ token on line 6
Scanner: True token on line 6
Scanner: ] token on line 6
Scanner: * token on line 6
Scanner: ( token on line 6
Scanner: name token on line 6: n
Scanner: + token on line 6
Scanner: integer literal token on line 6: 1
Scanner: ) token on line 6
Scanner: NEWLINE token on line 6
   7: 
   8: def find_primes():
Scanner: def token on line 8
Scanner: name token on line 8: find_primes
Scanner: ( token on line 8
Scanner: ) token on line 8
Scanner: : token on line 8
Scanner: NEWLINE token on line 8
   9:    i1 = 2
Scanner: INDENT token on line 9
Scanner: name token on line 9: i1
Scanner: = token on line 9
Scanner: integer literal token on line 9: 2
Scanner: NEWLINE token on line 9
  10:    while i1 <= n:
Scanner: while token on line 10
Scanner: name token on line 10: i1
Scanner: <= token on line 10
Scanner: name token on line 10: n
Scanner: : token on line 10
Scanner: NEWLINE token on line 10
  11:       i2 = 2 * i1
Scanner: INDENT token on line 11
Scanner: name token on line 11: i2
Scanner: = token on line 11
Scanner: integer literal token on line 11: 2
Scanner: * token on line 11
Scanner: name token on line 11: i1
Scanner: NEWLINE token on line 11
  12:       while i2 <= n:
Scanner: while token on line 12
Scanner: name token on line 12: i2
Scanner: <= token on line 12
Scanner: name token on line 12: n
Scanner: : token on line 12
Scanner: NEWLINE token on line 12
  13:          primes[i2] = False
Scanner: INDENT token on line 13
Scanner: name token on line 13: primes
Scanner: [ token on line 13
Scanner: name token on line 13: i2
Scanner: ] token on line 13
Scanner: = token on line 13
Scanner: False token on line 13
Scanner: NEWLINE token on line 13
  14:          i2 = i2 + i1
Scanner: name token on line 14: i2
Scanner: = token on line 14
Scanner: name token on line 14: i2
Scanner: + token on line 14
Scanner: name token on line 14: i1
Scanner: NEWLINE token on line 14
  15:       i1 = i1+1
Scanner: DEDENT token on line 15
Scanner: name token on line 15: i1
Scanner: = token on line 15
Scanner: name token on line 15: i1
Scanner: + token on line 15
Scanner: integer literal token on line 15: 1
Scanner: NEWLINE token on line 15
  16: 
  17: def w4(n):
Scanner: DEDENT token on line 17
Scanner: DEDENT token on line 17
Scanner: def token on line 17
Scanner: name token on line 17: w4
Scanner: ( token on line 17
Scanner: name token on line 17: n
Scanner: ) token on line 17
Scanner: : token on line 17
Scanner: NEWLINE token on line 17
  18:     if n <= 9:
Scanner: INDENT token on line 18
Scanner: if token on line 18
Scanner: name token on line 18: n
Scanner: <= token on line 18
Scanner: integer literal token on line 18: 9
Scanner: : token on line 18
Scanner: NEWLINE token on line 18
  19:         return '   ' + str(n)
Scanner: INDENT token on line 19
Scanner: return token on line 19
Scanner: string literal token on line 19: "   "
Scanner: + token on line 19
Scanner: name token on line 19: str
Scanner: ( token on line 19
Scanner: name token on line 19: n
Scanner: ) token on line 19
Scanner: NEWLINE token on line 19
  20:     elif n <= 99:
Scanner: DEDENT token on line 20
Scanner: elif token on line 20
Scanner: name token on line 20: n
Scanner: <= token on line 20
Scanner: integer literal token on line 20: 99
Scanner: : token on line 20
Scanner: NEWLINE token on line 20
  21:         return '  ' + str(n)
Scanner: INDENT token on line 21
Scanner: return token on line 21
Scanner: string literal token on line 21: "  "
Scanner: + token on line 21
Scanner: name token on line 21: str
Scanner: ( token on line 21
Scanner: name token on line 21: n
Scanner: ) token on line 21
Scanner: NEWLINE token on line 21
  22:     elif n <= 999:
Scanner: DEDENT token on line 22
Scanner: elif token on line 22
Scanner: name token on line 22: n
Scanner: <= token on line 22
Scanner: integer literal token on line 22: 999
Scanner: : token on line 22
Scanner: NEWLINE token on line 22
  23:         return ' ' + str(n)
Scanner: INDENT token on line 23
Scanner: return token on line 23
Scanner: string literal token on line 23: " "
Scanner: + token on line 23
Scanner: name token on line 23: str
Scanner: ( token on line 23
Scanner: name token on line 23: n
Scanner: ) token on line 23
Scanner: NEWLINE token on line 23
  24:     else:
Scanner: DEDENT token on line 24
Scanner: else token on line 24
Scanner: : token on line 24
Scanner: NEWLINE token on line 24
  25:         return str(n)
Scanner: INDENT token on line 25
Scanner: return token on line 25
Scanner: name token on line 25: str
Scanner: ( token on line 25
Scanner: name token on line 25: n
Scanner: ) token on line 25
Scanner: NEWLINE token on line 25
  26:    
  27: 
  28: def list_primes():
Scanner: DEDENT token on line 28
Scanner: DEDENT token on line 28
Scanner: def token on line 28
Scanner: name token on line 28: list_primes
Scanner: ( token on line 28
Scanner: ) token on line 28
Scanner: : token on line 28
Scanner: NEWLINE token on line 28
  29:     n_printed = 0
Scanner: INDENT token on line 29
Scanner: name token on line 29: n_printed
Scanner: = token on line 29
Scanner: integer literal token on line 29: 0
Scanner: NEWLINE token on line 29
  30:     line_buf = ''
Scanner: name token on line 30: line_buf
Scanner: = token on line 30
Scanner: string literal token on line 30: ""
Scanner: NEWLINE token on line 30
  31:     i = 2
Scanner: name token on line 31: i
Scanner: = token on line 31
Scanner: integer literal token on line 31: 2
Scanner: NEWLINE token on line 31
  32:     while i <= n:
Scanner: while token on line 32
Scanner: name token on line 32: i
Scanner: <= token on line 32
Scanner: name token on line 32: n
Scanner: : token on line 32
Scanner: NEWLINE token on line 32
  33:        if primes[i]:
Scanner: INDENT token on line 33
Scanner: if token on line 33
Scanner: name token on line 33: primes
Scanner: [ token on line 33
Scanner: name token on line 33: i
Scanner: ] token on line 33
Scanner: : token on line 33
Scanner: NEWLINE token on line 33
  34:           if n_printed > 0 and n_printed % 10 == 0:
Scanner: INDENT token on line 34
Scanner: if token on line 34
Scanner: name token on line 34: n_printed
Scanner: > token on line 34
Scanner: integer literal token on line 34: 0
Scanner: and token on line 34
Scanner: name token on line 34: n_printed
Scanner: % token on line 34
Scanner: integer literal token on line 34: 10
Scanner: == token on line 34
Scanner: integer literal token on line 34: 0
Scanner: : token on line 34
Scanner: NEWLINE token on line 34
  35:              print(line_buf)
Scanner: INDENT token on line 35
Scanner: name token on line 35: print
Scanner: ( token on line 35
Scanner: name token on line 35: line_buf
Scanner: ) token on line 35
Scanner: NEWLINE token on line 35
  36:              line_buf = ''
Scanner: name token on line 36: line_buf
Scanner: = token on line 36
Scanner: string literal token on line 36: ""
Scanner: NEWLINE token on line 36
  37:           line_buf = line_buf + w4(i)
Scanner: DEDENT token on line 37
Scanner: name token on line 37: line_buf
Scanner: = token on line 37
Scanner: name token on line 37: line_buf
Scanner: + token on line 37
Scanner: name token on line 37: w4
Scanner: ( token on line 37
Scanner: name token on line 37: i
Scanner: ) token on line 37
Scanner: NEWLINE token on line 37
  38:           n_printed = n_printed + 1
Scanner: name token on line 38: n_printed
Scanner: = token on line 38
Scanner: name token on line 38: n_printed
Scanner: + token on line 38
Scanner: integer literal token on line 38: 1
Scanner: NEWLINE token on line 38
  39:        i = i+1
Scanner: DEDENT token on line 39
Scanner: name token on line 39: i
Scanner: = token on line 39
Scanner: name token on line 39: i
Scanner: + token on line 39
Scanner: integer literal token on line 39: 1
Scanner: NEWLINE token on line 39
  40:     print(line_buf)
Scanner: DEDENT token on line 40
Scanner: name token on line 40: print
Scanner: ( token on line 40
Scanner: name token on line 40: line_buf
Scanner: ) token on line 40
Scanner: NEWLINE token on line 40
  41: 
  42: 
  43: find_primes()
Scanner: DEDENT token on line 43
Scanner: name token on line 43: find_primes
Scanner: ( token on line 43
Scanner: ) token on line 43
Scanner: NEWLINE token on line 43
  44: list_primes()
Scanner: name token on line 44: list_primes
Scanner: ( token on line 44
Scanner: ) token on line 44
Scanner: NEWLINE token on line 44
Scanner: E-o-f token
